{
  "stats": {
    "suites": 2,
    "tests": 26,
    "passes": 26,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-19T04:19:02.427Z",
    "end": "2024-04-19T04:19:18.782Z",
    "duration": 16355,
    "testsRegistered": 26,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b5440055-8502-4ceb-a1bd-53b56ff45437",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
          "title": "Verify setup with certificate page",
          "fullFile": "C:\\Users\\user\\Desktop\\Selenium practice\\ReportTesting\\test\\index.js",
          "file": "\\test\\index.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Verify setup with certificate page\"",
              "fullTitle": "Verify setup with certificate page \"before all\" hook in \"Verify setup with certificate page\"",
              "timedOut": false,
              "duration": 711,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// runs once before the first test in this block\ndriver = new webdriver.Builder().\n\twithCapabilities(webdriver.Capabilities.chrome()).build();",
              "err": {},
              "uuid": "7e6cbc6d-3a56-476a-9a8b-4c7d5c0859cf",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Certificate page open and getting title successfully ",
              "fullTitle": "Verify setup with certificate page Certificate page open and getting title successfully ",
              "timedOut": false,
              "duration": 8397,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://lalit-6.s3-website.ap-south-1.amazonaws.com/');\nawait driver.manage().setTimeouts({ implicit: 1000 });\nvar certificateTitleName = await driver.findElement(webdriver.By.className('title'));\n\n//certificateTitleName.sendKeys('Certificate');\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await certificateTitleName.getText('value')\nassert.equal(value, 'Certificate');",
              "err": {},
              "uuid": "c4687752-a452-45fe-b426-78515b64b899",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Subtitle getting successfully ",
              "fullTitle": "Verify setup with certificate page Subtitle getting successfully ",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\n \tvar certificateSubTitleName = await driver.findElement(webdriver.By.className('subtitle'));\n \tawait driver.manage().setTimeouts({ implicit: 5000 });\n \tlet value = await certificateSubTitleName.getText('value')\n \treturn assert.equal(value, 'of Appreciation');",
              "err": {},
              "uuid": "0865cdf2-f9a9-4f26-8821-6275de7763df",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Certificate Initial content getting successfully ",
              "fullTitle": "Verify setup with certificate page Certificate Initial content getting successfully ",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar certificateInitialContent = await driver.findElement(webdriver.By.className('initial-content'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await certificateInitialContent.getText('value')\nreturn assert.equal(value, 'This Certificate is proudly presented to');",
              "err": {},
              "uuid": "c4d478e4-7970-4121-b4d3-881d76825ce1",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Organization name getting successfully ",
              "fullTitle": "Verify setup with certificate page Organization name getting successfully ",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar certificateOrgName = await driver.findElement(webdriver.By.className('org-name'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await certificateOrgName.getText('value')\nreturn assert.equal(value, 'Maha Mission Education and Career Council');",
              "err": {},
              "uuid": "3055545f-2c01-424c-8f26-9921b3d8ff9a",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Organization Address getting successfully ",
              "fullTitle": "Verify setup with certificate page Organization Address getting successfully ",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar certificateOrgAdd = await driver.findElement(webdriver.By.className('org-address'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await certificateOrgAdd.getText('value')\nreturn assert.equal(value, 'Office No. 404, Vastu Viva, Besids Sanket Inn, Bhumkar Chowk Wakad, Pune, Maharashtra - 411057');",
              "err": {},
              "uuid": "5c5e5d8d-003c-4f9e-b77f-d53d4dc02c16",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signature of president getting successfully ",
              "fullTitle": "Verify setup with certificate page Signature of president getting successfully ",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar SignatureOfPresident = await driver.findElement(webdriver.By.className('sign-president'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await SignatureOfPresident.getText('value')\nreturn assert.equal(value, 'Signature of President');",
              "err": {},
              "uuid": "480d00da-3c91-47ba-b9f5-29caf99c4fe3",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signature of director getting successfully ",
              "fullTitle": "Verify setup with certificate page Signature of director getting successfully ",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar SignatureOfDirector = await driver.findElement(webdriver.By.className('sign-director'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await SignatureOfDirector.getText('value')\nreturn assert.equal(value, 'Signature of Director');",
              "err": {},
              "uuid": "acd49916-fe9e-45ea-8ac9-d6c1d2ecf8e8",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Main content getting successfully ",
              "fullTitle": "Verify setup with certificate page Main content getting successfully ",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar mainContent = await driver.findElement(webdriver.By.className('main-content'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await mainContent.getText('value')\nreturn assert.equal(value, 'for successfully completing the training course as\\n' + 'prescribed by the organisation');",
              "err": {},
              "uuid": "b168b31a-a733-41dc-89c9-241d4963369f",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signature of president getting successfully ",
              "fullTitle": "Verify setup with certificate page Signature of president getting successfully ",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar signaturOfPresident = await driver.findElement(webdriver.By.className('sign-president-img'));\nawait driver.manage().setTimeouts({ implicit: 5000 });",
              "err": {},
              "uuid": "d8db233a-6ab6-4abd-9da8-2010e228cd69",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signature of director getting successfully ",
              "fullTitle": "Verify setup with certificate page Signature of director getting successfully ",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar signaturOfDirector = await driver.findElement(webdriver.By.className('sign-director-img'));\nawait driver.manage().setTimeouts({ implicit: 5000 });",
              "err": {},
              "uuid": "667acea5-7122-4578-b60d-3d8106176f35",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logo for organization getting successfully ",
              "fullTitle": "Verify setup with certificate page Logo for organization getting successfully ",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar orgLogo = await driver.findElement(webdriver.By.className('org-logo'));\nawait driver.manage().setTimeouts({ implicit: 5000 });",
              "err": {},
              "uuid": "2a3b2457-0faa-44c4-a234-774e2a53c8bc",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logo for certificate page getting successfully ",
              "fullTitle": "Verify setup with certificate page Logo for certificate page getting successfully ",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar certificateLogo = await driver.findElement(webdriver.By.className('certificate-logo'));\nawait driver.manage().setTimeouts({ implicit: 5000 });",
              "err": {},
              "uuid": "ac0b9d43-7e24-4cc4-bdd3-3547ee579f53",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Certificate number getting successfully ",
              "fullTitle": "Verify setup with certificate page Certificate number getting successfully ",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const certificateElement = await driver.findElement(webdriver.By.className('sr-no'));\n      const certificateText = await certificateElement.getText();\n      const certificateNumber = certificateText.split('Certificate Number: ')[1];\n      // Expected certificate number format (Certificate Number: followed by any digit)\n  const expectedCertificateNumberFormat = /^Certificate Number: \\d+$/;\n  assert.match(certificateText, expectedCertificateNumberFormat, 'Certificate number format should match expected format');",
              "err": {},
              "uuid": "1cc650bc-cde9-40b3-a6ee-1709824aae5f",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Certificate date getting successfully ",
              "fullTitle": "Verify setup with certificate page Certificate date getting successfully ",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dateElement = await driver.findElement(webdriver.By.className('date'));\nconst dateText = await dateElement.getText();\n// Expected date format (Date: followed by DD/MM/YYYY format)\nconst expectedDateFormat = /^Date: \\d{2}\\-\\d{2}\\-\\d{4}$/;\nassert.match(dateText, expectedDateFormat, 'Date format should match expected format');",
              "err": {},
              "uuid": "5c009b9e-f9c1-43dd-8099-125db9f5b8bc",
              "parentUUID": "c1760ea8-ba20-44fb-ade9-3a0d6de01de6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4687752-a452-45fe-b426-78515b64b899",
            "0865cdf2-f9a9-4f26-8821-6275de7763df",
            "c4d478e4-7970-4121-b4d3-881d76825ce1",
            "3055545f-2c01-424c-8f26-9921b3d8ff9a",
            "5c5e5d8d-003c-4f9e-b77f-d53d4dc02c16",
            "480d00da-3c91-47ba-b9f5-29caf99c4fe3",
            "acd49916-fe9e-45ea-8ac9-d6c1d2ecf8e8",
            "b168b31a-a733-41dc-89c9-241d4963369f",
            "d8db233a-6ab6-4abd-9da8-2010e228cd69",
            "667acea5-7122-4578-b60d-3d8106176f35",
            "2a3b2457-0faa-44c4-a234-774e2a53c8bc",
            "ac0b9d43-7e24-4cc4-bdd3-3547ee579f53",
            "1cc650bc-cde9-40b3-a6ee-1709824aae5f",
            "5c009b9e-f9c1-43dd-8099-125db9f5b8bc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8796,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
          "title": "Verify Letter head setup",
          "fullFile": "C:\\Users\\user\\Desktop\\Selenium practice\\ReportTesting\\test\\index.js",
          "file": "\\test\\index.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Verify Letter head setup\"",
              "fullTitle": "Verify Letter head setup \"before all\" hook in \"Verify Letter head setup\"",
              "timedOut": false,
              "duration": 674,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// runs once before the first test in this block\ndriver = new webdriver.Builder().\n\twithCapabilities(webdriver.Capabilities.chrome()).build();",
              "err": {},
              "uuid": "fb6afe8a-3b10-4fa1-b16f-4e98ecbf357a",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Letter page open and getting title successfully ",
              "fullTitle": "Verify Letter head setup Letter page open and getting title successfully ",
              "timedOut": false,
              "duration": 5680,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('file:///C:/Users/user/Downloads/Recent%20Download/04%20Letter%20Head/sample-code/preview.html');\nvar letterOrgName = await driver.findElement(webdriver.By.className('letter-org-name'));\n\n//certificateTitleName.sendKeys('Certificate');\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await letterOrgName.getText('value')\nassert.equal(value, 'YOUR COMPANY NAME');",
              "err": {},
              "uuid": "b9cb03c6-c2de-4d2f-821b-2d518161e049",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Letter org detailed getting successfully ",
              "fullTitle": "Verify Letter head setup Letter org detailed getting successfully ",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar letterOrgDetails = await driver.findElement(webdriver.By.className('letter-org-details'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await letterOrgDetails.getText('value')\nreturn assert.equal(value, 'SLOGAN OF YOUR COMPANY');",
              "err": {},
              "uuid": "2b551a45-cbb5-4294-8ec7-7c37668a2c86",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Letter reference number getting successfully ",
              "fullTitle": "Verify Letter head setup Letter reference number getting successfully ",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar letterReferenceNumber = await driver.findElement(webdriver.By.className('letter-ref'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await letterReferenceNumber.getText('value')\nreturn assert.equal(value, 'Ref. No:');",
              "err": {},
              "uuid": "cc4fca31-b80c-49f1-9089-4c9579fd4083",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Letter date getting successfully ",
              "fullTitle": "Verify Letter head setup Letter date getting successfully ",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar letterDate = await driver.findElement(webdriver.By.className('letter-date'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await letterDate.getText('value')\nreturn assert.equal(value, 'Date:');",
              "err": {},
              "uuid": "219967ed-dbc4-4b6c-9c54-22d86ce40113",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Letter body getting successfully ",
              "fullTitle": "Verify Letter head setup Letter body getting successfully ",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar letterBody = await driver.findElement(webdriver.By.className('letter-body-to'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await letterBody.getText('value')\nreturn assert.equal(value, \"To, Kiran Kshirsagar Head of the department, JSPM's RSCOE College, Tathwade,Pune-411033.\");",
              "err": {},
              "uuid": "f9f58d1e-8540-468f-a0f8-972f39017f71",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Letter organization website getting successfully ",
              "fullTitle": "Verify Letter head setup Letter organization website getting successfully ",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar letterBody = await driver.findElement(webdriver.By.className('letter-org-website'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await letterBody.getText('value')\nreturn assert.equal(value, \"WWW.WEBTOUCHINDIA@CO.IN\");",
              "err": {},
              "uuid": "89911793-fefe-4549-92ab-67df9fb81a38",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Letter organization website getting successfully ",
              "fullTitle": "Verify Letter head setup Letter organization website getting successfully ",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar letterBody = await driver.findElement(webdriver.By.className('letter-org-phone'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await letterBody.getText('value')\nreturn assert.equal(value, \"+91 020 247335\");",
              "err": {},
              "uuid": "df13e32d-1c96-4586-b850-011d3dcb6ebe",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Letter organization address getting successfully ",
              "fullTitle": "Verify Letter head setup Letter organization address getting successfully ",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar letterBody = await driver.findElement(webdriver.By.className('letter-org-address'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await letterBody.getText('value')\nreturn assert.equal(value, \"Sai-Sagar,Sr no.133,Gurudwara chowk, walhekarwadi,Chinchwad,Pune-411033.\");",
              "err": {},
              "uuid": "43868406-4673-4105-9baa-b2e16462b940",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Letter organization address getting successfully ",
              "fullTitle": "Verify Letter head setup Letter organization address getting successfully ",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar letterBody = await driver.findElement(webdriver.By.className('letter-org-email'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await letterBody.getText('value')\nreturn assert.equal(value, \"kiran.kshirsagar444@gmail.com\");",
              "err": {},
              "uuid": "0bc8bc1b-07dc-4b45-9e9b-6e9078f3cca2",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Post in company and name in company getting successfully ",
              "fullTitle": "Verify Letter head setup Post in company and name in company getting successfully ",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.manage().setTimeouts({ implicit: 5000 });\nvar letterOrgDetails = await driver.findElement(webdriver.By.className('letter-body-sign'));\nawait driver.manage().setTimeouts({ implicit: 5000 });\nlet value = await letterOrgDetails.getText('value')\nreturn assert.equal(value, 'Mr. ABC PQR\\n' + 'POST IN COMPANY\\n' + 'NAME OF COMPANY');",
              "err": {},
              "uuid": "ea1bb3ee-9f21-416f-9b46-3d7a3f6c0dce",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that logo image should be loaded successfully",
              "fullTitle": "Verify Letter head setup Verify that logo image should be loaded successfully",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n\t\t\tconst logoElement = await driver.findElement(webdriver.By.xpath(\"//div[@class='letter-org-logo']/img\"));\n\t\t\tconst isLoaded = await logoElement.isDisplayed();\n\t\n\t\t\tassert.strictEqual(isLoaded, true, 'Logo image is not loaded successfully');\n\t        console.log('Logo image loaded successfully!');\n\t\t    } catch (error) {\n\t\t\tconsole.error('Logo image loading test failed:', error.message);\n\t\t}",
              "err": {},
              "uuid": "555311ce-d467-4293-9ad6-e41c2bcd515c",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify letter width should be present in mm",
              "fullTitle": "Verify Letter head setup Verify letter width should be present in mm",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n\t\n\t// Execute JavaScript code in the browser context to access the style sheets and CSS rules\n\tconst mmRules = await driver.executeScript(() => \n{\n\t\tconst styleSheets = document.styleSheets;\n\t\tconst mmRules = [];\n\t\n\t\t// Iterate over the style sheets\n\t\tfor (const styleSheet of styleSheets) \n\t\t{\n\t\t\t// Get the CSS rules for the style sheet\n\t\t\tconst cssRules = styleSheet.cssRules;\n\t\n\t\t\t// Iterate over the CSS rules\n\t\t\tfor (const cssRule of cssRules) \n\t\t\t{\n\t\t\t\t// Check if the CSS rule contains the class '.mm'\n\t\t\t\tif (cssRule.selectorText && cssRule.selectorText.includes('.mm')) \n\t\t\t\t{\n\t\t\t\t\tmmRules.push(cssRule.cssText);\n\t\t\t\t}\n\t\t\t}\n\t    }\n\t\treturn mmRules;\n});\n\t\n\t   // Print the matched CSS rules to the console\n\t     console.log('MM Rules:', mmRules);\n\t\n\t  // Assert that there are matched CSS rules\n\t     assert.isNotEmpty(mmRules, 'No CSS rules found for class \".mm\"');\n    } catch (error) {\n\tconsole.error('Error occurred:', error);\n}",
              "err": {},
              "uuid": "ac80486d-a14e-4a0e-96d4-08307a221f2d",
              "parentUUID": "00df06b9-b9e6-4417-b07e-6b4ca2643cdd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b9cb03c6-c2de-4d2f-821b-2d518161e049",
            "2b551a45-cbb5-4294-8ec7-7c37668a2c86",
            "cc4fca31-b80c-49f1-9089-4c9579fd4083",
            "219967ed-dbc4-4b6c-9c54-22d86ce40113",
            "f9f58d1e-8540-468f-a0f8-972f39017f71",
            "89911793-fefe-4549-92ab-67df9fb81a38",
            "df13e32d-1c96-4586-b850-011d3dcb6ebe",
            "43868406-4673-4105-9baa-b2e16462b940",
            "0bc8bc1b-07dc-4b45-9e9b-6e9078f3cca2",
            "ea1bb3ee-9f21-416f-9b46-3d7a3f6c0dce",
            "555311ce-d467-4293-9ad6-e41c2bcd515c",
            "ac80486d-a14e-4a0e-96d4-08307a221f2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6082,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}